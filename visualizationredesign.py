# -*- coding: utf-8 -*-
"""visualizationRedesign.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_AY1g9VdD5MN01oz-b3U1qaLNwHr15dt
"""

#installations
import ipywidgets as widgets
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd

import dash
from dash import dcc, html
from dash import dash_table
from dash.dependencies import Input, Output
import logging

#upload data
df = pd.read_csv("betterdamdata.csv")
df.head()

average_people = df["people"].mean()

df_temp = df.copy()

df_temp["people"] = df_temp["people"].fillna(average_people)

app = dash.Dash(__name__)

display_name_map = {
    "Project name": "Name",
    "Country": "Country",
    "people": "Dependant Population",
    "lastOb": "Last Observation"
}

# Create the Map Visualization
fig_map = px.scatter_mapbox(
    df_temp,
    lat="LAT_cleaned",
    lon="Lon_Cleaned",
    hover_name="Project name",
    hover_data={
        "DAM_ID": False,
        "Country": False,
        "people": False,
        "LAT_cleaned": False,
        "Lon_Cleaned": False,
    },
    size="people",
    size_max=10,
    color = "Country",
    color_discrete_map={
        "Canada": "#00296B",
        "Argentina": "#003F88",
        "Guyana": "#00509D",
        "Brazil": "#FDC500",
        "United States": "#FFD500",
        "Bolivia":"#00A676",
    },
    zoom=2,
    height=600

)

fig_map.update_layout(
    legend=dict(
        x=0.99,
        y=0.99,
        xanchor='right',
        yanchor='top',
        bgcolor="#003F88",
        font=dict(
            color="white"
        )
    ),
    mapbox_style="open-street-map",
    margin={"r":0,"t":0,"l":0,"b":0}
)

default_table = {
    'Name': df['Project name'][0],
    'People': df['people'][0],
    'Last Observed': df['lastOb'][0],
    'Country': df['Country'][0]
}

app.layout = html.Div([
    # Title
    html.H1("Dam Visualization Dashboard", style={'textAlign': 'center','padding-top': '10px','color':'white'}),

    # Create a row for table + plot and map
    html.Div([
        # Column 1: Table on top and Line Plot below (50% width)
        html.Div([
            html.Div(id='dam-table', style={'margin-bottom': '0px','width': '100%','padding': '10px'}),  # Adding margin to reduce the gap
            dcc.Graph(id='line-plot', figure={},style={'width': '100%','padding': '10px'}),
        ], style={'width': '600px', 'display': 'inline-block', 'vertical-align': 'top', 'padding': '10px','padding-top:':'0px'}),

        # Column 2: Map on top and Search below (50% width)
        html.Div([
            html.Div([
                dcc.Input(
                    id='search-bar',
                    type='text',
                    placeholder='Search for a dam...',
                    #debounce=500  # Wait for 500ms after the last keystroke
                ),
            ], style={'padding': '10px', 'margin-top': '0px','width': '100%'}),
            dcc.Graph(id='map', figure=fig_map, style={'width': '100%', 'height': '100%','max-width': '400px', 'padding': '10px'}),
        ], style={'padding': '10px','width': '600x', 'display': 'inline-block','margin':'10px'}),
    ], style={'display': 'flex', 'justify-content': 'space-between', 'align-items': 'flex-start','backgroundColor': '#003F88'}),
    dcc.Store(id='debug-store')
], style = {'backgroundColor': '#00296B'})




@app.callback(
    [Output('line-plot', 'figure'),
     Output('dam-table', 'children'),
    Output('debug-store', 'data')],
    [Input('map', 'clickData')],
    [Input('search-bar', 'value')]
)
def update_visuals(clickData,search_value):
    if clickData is None and search_value is None:
      project_name = "Keeyask"
    else:
      if search_value:
        dam_data = df_temp[df_temp["Project name"].str.contains(search_value, case=False, na=False)]
        if not dam_data.empty:
          project_name = dam_data['Project name'].iloc[0]
        else:
          project_name = "Keeyask"
      else:
          project_name = clickData['points'][0]['hovertext']

    dam_data = df_temp[df_temp["Project name"] == project_name]

    month_order = [
        "jan", "feb", "mar", "apr", "may", "jun",
        "jul", "aug", "sep", "oct", "nov", "dec"
    ]

    dam_data["month"] = pd.Categorical(dam_data["month"], categories=month_order, ordered=True)
    dam_data = dam_data.sort_values(by="month")

    surface_area = dam_data["area"].values
    months = dam_data["month"].values

    line_fig = go.Figure()
    line_fig.add_trace(go.Scatter(
        x=months,
        y=surface_area,
        mode='lines+markers',
        name="Surface Area",
        line=dict(color='#FFD500'),
        marker=dict(color='#FDC500')
    ))
    line_fig.update_layout(
        title="Surface Area Over Time",
        xaxis_title="Month",
        yaxis_title="Surface Area",
        showlegend=False,
        font=dict(color="white"),
        paper_bgcolor="#003F88",
        plot_bgcolor="#00509D",
        xaxis=dict(
            color="white",
            gridcolor="#003F88"
        ),
        yaxis=dict(
            color="white",
            gridcolor="#003F88"
        )
    )

    dam_info = dam_data[['Project name', 'Country', 'people','lastOb']].iloc[0].to_dict()

    table_data = [{
      'Attribute': display_name_map.get(key, key),  # Fallback to key if not in map
      'Value': value
  } for key, value in dam_info.items()]

    table_content = dash_table.DataTable(
        columns=[
            {"name": "Attribute", "id": "Attribute"},
            {"name": "Value", "id": "Value"}
        ],
        data=table_data,
        style_table={
            'overflowY': 'auto',
            },
        style_cell={
            'textAlign': 'left',
            'padding': '10px',
            'backgroundColor':'#003F88',
            'color':'white',
            'border':'1px solid white'
        },
        style_header={
            'display': 'none',
        }
    )
    debug_data = {'project_name': project_name, 'dam_info': dam_info}
    return line_fig, table_content, debug_data

if __name__ == '__main__':
    app.run(debug=True)

